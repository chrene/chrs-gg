---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';
import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';

import Layout from '~/layouts/PageLayout.astro';
import BlogList from '~/components/blog/List.astro';
import Headline from '~/components/blog/Headline.astro';
import Pagination from '~/components/blog/Pagination.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';
import RelatedPosts from '~/components/blog/RelatedPosts.astro';
// import PostTags from "~/components/blog/Tags.astro";

import { blogListRobots, getStaticPathsBlogList, getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { getCanonical, getPermalink } from '~/utils/permalinks';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';

export const prerender = true;

export const getStaticPaths = (async ({ paginate }) => {
  const listPaths = await getStaticPathsBlogList({ paginate });
  const postPaths = await getStaticPathsBlogPost();
  return [...listPaths, ...postPaths];
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const props = Astro.props as Props;

// Check if this is a blog post (has post prop) or blog listing (has page prop)
const isPost = 'post' in props;
const post = isPost ? (props as any).post : null;
const page = !isPost ? (props as any).page : null;

let metadata: MetaData;
let url: string | URL | undefined;
let image: ImageMetadata | string | undefined;

if (isPost && post) {
  // Individual blog post metadata
  url = getCanonical(getPermalink(post.permalink, 'post'));
  image = (await findImage(post.image)) as ImageMetadata | string | undefined;
  
  metadata = merge(
    {
      title: post.title,
      description: post.excerpt,
      robots: {
        index: blogPostRobots?.index,
        follow: blogPostRobots?.follow,
      },
      openGraph: {
        type: 'article',
        ...(image
          ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] }
          : {}),
      },
    },
    { ...(post?.metadata ? { ...post.metadata, canonical: post.metadata?.canonical || url } : {}) }
  ) as MetaData;
} else if (page) {
  // Blog listing metadata
  const currentPage = page.currentPage ?? 1;
  metadata = {
    title: `Blog${currentPage > 1 ? ` â€” Page ${currentPage}` : ''}`,
    robots: {
      index: blogListRobots?.index && currentPage === 1,
      follow: blogListRobots?.follow,
    },
    openGraph: {
      type: 'blog',
    },
  };
} else {
  // Fallback metadata
  metadata = {
    title: 'Blog',
    openGraph: {
      type: 'blog',
    },
  };
}

// const allCategories = await findCategories();
// const allTags = await findTags();
---

<Layout metadata={metadata}>
  {isPost && post ? (
    <Fragment>
      <SinglePost post={{ ...post, image: image }} url={url || ''}>
        {post.Content ? <post.Content /> : <Fragment set:html={post.content || ''} />}
      </SinglePost>
      <ToBlogLink />
      <RelatedPosts post={post} />
    </Fragment>
  ) : page ? (
    <section class="px-6 sm:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
      <Headline
        subtitle="A statically generated blog example with news, tutorials, resources and other interesting content related to AstroWind"
      >
        The Blog
      </Headline>
      <BlogList posts={page.data} />
      <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
      <!--
        <PostTags tags={allCategories} class="mb-2" title="Search by Categories:" isCategory />
        <PostTags tags={allTags}  title="Search by Tags:" />
      -->
    </section>
  ) : (
    <section class="px-6 sm:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
      <Headline>Blog</Headline>
    </section>
  )}
</Layout>
